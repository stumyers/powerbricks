open subprog calcVecVars(void)
  local idx, mnum;    // Motor index, motor number
  local Motors(5);

  Motors(0) = 5;      // Stack X
  Motors(1) = 3;      // Pin Y
  Motors(2) = 4;      // Pin Z
  Motors(3) = 8;      // Omega
  Motors(4) = 1;      // Shutter Rot

  VecDataAcqDuration = VecExposure*VecNumSamples;
  
  // Shutter Change in Position
  VecShutChgPos = ShutterOpenPos - ShutterClosedPos;

  // Shutter Opening Time (ms)
  VecShutTime = abs(VecShutChgPos) / ShutterSpeed;

  VecMaxTimeToSpeed = 0;
  idx = 0;
  while(idx < 4)
  {
    mnum = Motors(idx);
  
    // Acceleration (cts/ms^2)
    VecAccel(idx)       = 1/(-Motor[mnum].JogTa);
    VecDataAcqDist(idx) = VecEndPos(idx) - VecStartPos(idx)
    VecDesSpeed(idx)    = VecDataAcqDist(idx) / VecDataAcqDuration;
    VecTooFast(idx)     = 0;
    if(abs(VecDesSpeed(idx)) > Motor[mnum].MaxSpeed) {
      VecTooFast(idx) = 1;
    }
    
    VecTimeToSpeed(idx) = abs(VecDesSpeed(idx)) / VecAccel(idx);
    
    if(VecTimeToSpeed(idx) > VecMaxTimeToSpeed) {
      VecMaxTimeToSpeed = VecTimeToSpeed(idx);
    }
    
    if(VecStartPos(idx) > VecEndPos(idx)) {
      VecDir(idx) = -1;
    } else {
      VecDir(idx) = 1;
    }
    
    VecSpeedUpDist(idx) = VecDir(idx)*VecAccel(idx)*VecTimeToSpeed(idx)*VecTimeToSpeed(idx)/2;
    VecBufferDist(idx) = VecDesSpeed(idx)*VecBufferTime;
    
    // Shutter distances
    VecShutOpenDist(idx) = VecDesSpeed(idx)*VecShutTime;
    VecShutLagDist(idx)  = VecDesSpeed(idx)*ShutterLag;
  
    // Total backup
    VecBackUpDist(idx) = VecSpeedUpDist(idx) + VecBufferDist(idx) + VecShutOpenDist(idx) + VecShutLagDist(idx);
    
    idx = idx + 1;
  }
close