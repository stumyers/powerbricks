#define VEC_IDLE      0
#define VEC_BACKUP    1
#define VEC_HOLDING   2
#define VEC_ACQUIRING 3

open plc VecPLC

local idx, mnum;    // Motor index, motor number
local Motors(5);

Motors(0) = 5;      // Stack X
Motors(1) = 3;      // Pin Y
Motors(2) = 4;      // Pin Z
Motors(3) = 8;      // Omega
Motors(4) = 1;      // Shutter Rot

local x_idx, y_idx, z_idx, o_idx, s_idx;
x_idx = Motors(0);
y_idx = Motors(1);
z_idx = Motors(2);
o_idx = Motors(3);
s_idx = Motors(4);

VecRunning = 0;
VecAbort   = 0;
VecProceed = 0;
VecState   = VEC_IDLE;

// Clear flag to the Zebra
Gate3[0].Chan[0].EquWrite = $1;

if(VecGo == 1) 
{
  VecGo = 0;   // Clear command flag

  // Calculate
  call calcVecVars();
  if(VecTooFast(0) || VecTooFast(1) || VecTooFast(2) || VecTooFast(3)) {
    return;
  }  

  // Reenable Pin Y and Pin Z
  //jog/3,4;

  VecRunning = 1;   // Set general running flag
  VecState   = VEC_BACKUP;  
    
  // Backup motors, close shutter
  Ldata.coord = 1;
  abs; rapid;
  //B(ShutterClosedPos) A(VecStartPos(3) - VecBackUpDist(3)) X(VecStartPos(0) - VecBackUpDist(0)) Y(VecStartPos(1) - VecBackUpDist(1)) Z(VecStartPos(2) - VecBackUpDist(2));
  B(ShutterClosedPos) A(VecStartPos(3) - VecBackUpDist(3));
  call timer(0.01);
  //while (Motor[o_idx].DesVel != 0 || Motor[x_idx].DesVel != 0 || Motor[y_idx].DesVel != 0 || Motor[z_idx].DesVel != 0) {}
  while (Motor[o_idx].DesVel != 0) {}

  // Don't expose if not told to do so
  if(VecExpose == 0) {
    VecShutChgPos = 0;
  }
  
  if(VecSetupGather == 1) {
    Gather.Addr[0] = Sys.ServoCount.a;
    Gather.Addr[1] = Motor[5].DesPos.a;
    Gather.Addr[2] = Motor[5].ActPos.a;
    Gather.Addr[3] = Motor[3].DesPos.a;
    Gather.Addr[4] = Motor[3].ActPos.a;
    Gather.Addr[5] = Motor[4].DesPos.a;
    Gather.Addr[6] = Motor[4].ActPos.a;
    Gather.Addr[7] = Motor[8].DesPos.a;
    Gather.Addr[8] = Motor[8].ActPos.a;
    Gather.Addr[9] = Motor[1].DesPos.a;
    Gather.Addr[10] = Motor[1].ActPos.a;
    Gather.Items = 11;
  }    
  
  // Flag to the zebra  
  Gate3[0].Chan[0].EquWrite = $3;
  
  // Wait for second part
  if(VecHold == 1) {
  
    VecState = VEC_HOLDING;
    VecProceed = 0;
    while(VecProceed == 0 && VecAbort == 0) {}
  }
  
  // Check if aborted
  if(VecAbort == 1) {
    return;
  }
  
  VecState = VEC_ACQUIRING;
  //begin 1:vec;
  begin 1:osc;
  run 1; 
  
  // Wait program to finish
  call timer(0.01);
  while(VecAbort == 0 && Coord[1].ProgActive == 1) {}
  
  Gate3[0].Chan[0].EquWrite = $1;
  
  // Check if the program was aborted
  if(VecAbort) {
    abort 1; // Abort program
  }
  
  // Close shutter for good measure
  abs; rapid;
  B(ShutterClosedPos);
  dwell 0;
  
  VecGo = 0;
}

close